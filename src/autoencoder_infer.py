import torch
import torch.nn as nn
import numpy as np
import os
import matplotlib.pyplot as plt
import matplotlib
matplotlib.use('Agg')

WINDOW_SIZE = 512  # —Ä–∞–∑–º–µ—Ä –≤—Ö–æ–¥–∞ –º–æ–¥–µ–ª–∏

# === –ú–æ–¥–µ–ª—å (–¥–æ–ª–∂–Ω–∞ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –æ–±—É—á–µ–Ω–∏–µ–º) ===
class Autoencoder(nn.Module):
    def __init__(self):
        super().__init__()
        self.encoder = nn.Sequential(
            nn.Linear(WINDOW_SIZE, 256),
            nn.ReLU(),
            nn.Linear(256, 64),
            nn.ReLU(),
            nn.Linear(64, 16),
        )
        self.decoder = nn.Sequential(
            nn.Linear(16, 64),
            nn.ReLU(),
            nn.Linear(64, 256),
            nn.ReLU(),
            nn.Linear(256, WINDOW_SIZE),
        )

    def forward(self, x):
        return self.decoder(self.encoder(x))

# === –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞ –¥–æ/–ø–æ—Å–ª–µ ===
def plot_comparison(original, reconstructed, save_path=None):
    plt.figure(figsize=(12, 4))
    plt.plot(original, label="–û—Ä–∏–≥–∏–Ω–∞–ª", alpha=0.6)
    plt.plot(reconstructed, label="–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π", linewidth=1.5)
    plt.title("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ —á–µ—Ä–µ–∑ –∞–≤—Ç–æ—ç–Ω–∫–æ–¥–µ—Ä")
    plt.xlabel("–ò–Ω–¥–µ–∫—Å")
    plt.ylabel("–ê–º–ø–ª–∏—Ç—É–¥–∞")
    plt.legend()
    plt.grid(True)
    if save_path:
        plt.savefig(save_path)
        print(f"‚úÖ –ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {save_path}")
    else:
        plt.show()
    plt.close()

# === –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥ ===
if __name__ == "__main__":
    root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
    model_path = os.path.join(root, "models", "autoencoder.pth")
    signal_path = os.path.join(root, "data", "real_preprocessed", "100601_12015_7_preprocessed.npy")
    save_plot = os.path.join(root, "data", "real_preprocessed", "100601_12015_7_compare.png")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
    model = Autoencoder()
    model.load_state_dict(torch.load(model_path, map_location="cpu"))
    model.eval()

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–∏–≥–Ω–∞–ª
    signal = np.load(signal_path)
    signal = signal[:WINDOW_SIZE]  # —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 512 —Ç–æ—á–µ–∫
    x = torch.tensor(signal, dtype=torch.float32).unsqueeze(0)  # [1, 512]

    # –ò–Ω—Ñ–µ—Ä–µ–Ω—Å
    with torch.no_grad():
        output = model(x).squeeze().numpy()

    # MSE
    mse = np.mean((signal - output) ** 2)
    print(f"üìä MSE –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞: {mse:.6f}")

    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
    plot_comparison(signal, output, save_path=save_plot)
